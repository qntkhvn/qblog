[
  {
    "path": "posts/2022-12-19-arg/",
    "title": "Recreating a Terrible Map",
    "description": "For fun only. Don't try this at home.",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2022-12-19",
    "categories": [
      "data viz",
      "ggplot2",
      "map"
    ],
    "contents": "\nArgentina just won the 2022 FIFA World Cup.\nWhile I was checking Twitter (which will probably be dead soon) today, I saw this post.\n\n\npic.twitter.com/Dd4rew5ADp\n\n— Terrible Maps (@TerribleMaps) December 19, 2022\n\nSince I have no motivation to do work today, I might as well attempt to recreate this awful data viz. \nAs stated in the description, this is just for fun.\nIn fact, don’t plot any nonsense like this for your project/research.\n(Although… this may be a useful tutorial for plotting maps in R.)\n\n\nlibrary(tidyverse)\ntheme_set(theme_minimal())\n# theme for later\ntheme_map <- theme(\n  plot.title = element_text(\n    face = \"bold\", \n    hjust = 0.5,\n    size = 18\n  ),\n  legend.position = \"none\",\n  axis.title = element_blank(),\n  axis.text = element_blank(),\n  axis.ticks = element_blank()\n)\n\n\nFirst, data for plotting a world map can be obtained from the function map_data of the ggplot2 package.\nHere’s a glimpse of our data.\n\n\nmap_data(\"world\") |> \n  glimpse()\n\nRows: 99,338\nColumns: 6\n$ long      <dbl> -69.89912, -69.89571, -69.94219, -70.00415, -70.06…\n$ lat       <dbl> 12.45200, 12.42300, 12.43853, 12.50049, 12.54697, …\n$ group     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,…\n$ order     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16,…\n$ region    <chr> \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Arub…\n$ subregion <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\nAs for data wrangling, the only task is to create an indicator column for whether or not a country is Argentina.\nThen, the key for making the map is to use geom_polygon(), with a specified group aesthetic for drawing the countries.\nThe so-called “base map” looks like this.\n\n\nbase <- map_data(\"world\") |> \n  mutate(arg = ifelse(region == \"Argentina\", \"y\", \"n\")) |> \n  ggplot(aes(long, lat, group = group, fill = arg)) +\n  geom_polygon() +\n  scale_x_continuous(breaks = seq(-180, 180, 40)) +\n  scale_y_continuous(breaks = seq(-90, 90, 30))\nbase\n\n\n\nThe next step is to transform the map from the current Cartesian coordinate to a new map projection.\nThe function coord_map() can be used to accomplish this.\nAfter some digging, I find that orthographic projection is the right representation here.\n(For more information about the different types of projection available, run ?coord_map and ?mapproject).\nI also use an online color picker to get the right colors for filling the countries.\n\n\nar <- base +\n  scale_fill_manual(values = c(\"#e0e0e0\", \"#176b2d\")) +\n  coord_map(\"orthographic\", orientation = c(-30, -60, 0)) +\n  labs(title = \"Argentina\") + \n  theme_map\nar\n\n\n\nNow, let’s quickly play the same game and make the second plot.\n\n\narent <- base +\n  scale_fill_manual(values = c(\"#176b2d\", \"#e0e0e0\")) +\n  coord_map(\"orthographic\", orientation = c(-15, -60, 0)) +\n  labs(title = \"Are'ntgentina\") + \n  theme_map\narent\n\n\n\nFinally, the two plots can be patched together to get the desired figure.\n\n\nlibrary(cowplot)\nplot_grid(ar, arent, nrow = 1)\n\n\n\nLooks great to me.\nMore work can be done regarding finding the correct rotation/projection angle, but this is good enough for now.\nBy the way, after finishing this map, I found out that coord_map() is superseded by coord_sf().\nI quickly looked into this function (and its relatives), and it appears that the syntax is a bit more complicated and somewhat dependent on the powerful sf package.\nI will certainly try this out at another time.\n\n\n\n",
    "preview": "posts/2022-12-19-arg/argmap.png",
    "last_modified": "2022-12-19T23:27:49-05:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-08-01-pi-digits/",
    "title": "Heatmaps of the first 100000 digits of pi and e",
    "description": "Chaos of numbers",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2022-08-01",
    "categories": [
      "data viz",
      "ggplot2",
      "numbers"
    ],
    "contents": "\nI recently saw this Twitter post about a heatmap of the first 100000\ndigits of \\(\\pi\\):\n\n\nA visual representation of the first 100,000 digits of π\npic.twitter.com/MPGpckbds0\n\n— Fermat's Library (@fermatslibrary)\nJuly\n31, 2022\n\nLet’s see how closely I can recreate this figure.\nFirst, let’s get data for the first 100000 digits of \\(\\pi\\), clean it up, and transform it to the\nright format. I will let the figure size be 400 x 250.\n\n\nlibrary(tidyverse)\nlibrary(rvest)\n\npi <- read_html(\"https://www.angio.net/pi/digits/100000.txt\") |> \n  html_text() |> \n  str_remove(\"\\\\.\") \n\npi_digit <- tibble(digit = pi) |> \n  mutate(digit = str_split(digit, \"\")) |> \n  unnest_longer(digit) |> \n  mutate(row_index = rep(1:400, 250),\n         col_index = rep(1:250, each = 400))\n\n\nNow, a few lines of ggplot2 should give the desired\nvisualization.\n\n\npi_digit |>\n  ggplot(aes(row_index, col_index, fill = factor(digit))) +\n  geom_tile() +\n  scale_fill_manual(values = rainbow(10)) +\n  scale_y_reverse() + \n  guides(fill = guide_legend(nrow = 1, title = NULL)) + \n  coord_equal() +\n  theme_void() +\n  theme(legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.text = element_text(size = 9, margin = margin(l = -17, unit = \"pt\")))\n\n\n\nBreakdown:\ngeom_tile() did the trick here. This one of my\nfavorite ggplot2 functions.\nI recognized the color scheme in the original plot is quite\nsimilar to a rainbow palette. The function rainbow() came\nin handy here.\nI also reversed the y-axis scale, to ensure the first digit (3)\nis on the top left.\nWith a bit of digging, I was able to figure out how to move the\nlegend text inside the colored keys.\nBonus: let’s play the same game and plot the first 100000 digits of\n\\(e\\) (Euler’s number).\n\n\ne <- read_html(\"http://boston.conman.org/2004/11/12/e100k.txt\") |> \n  html_text() |> \n  str_remove(\"^[^\\n]*\\n\") |>  # remove first line \n  str_remove_all(\"\\\\s\")       # remove all whitespace\n\n# append 2 to the string of first 99999 digits\n# since these are digits after the decimal\ne_digit <- tibble(digit = str_c(2, str_sub(e, 1, 99999))) |> \n  mutate(digit = str_split(digit, \"\")) |> \n  unnest_longer(digit) |> \n  mutate(row_index = rep(1:400, each = 250),\n         col_index = rep(1:250, 400))\n\ne_digit |>\n  ggplot(aes(row_index, col_index, fill = factor(digit))) +\n  geom_tile() +\n  scale_fill_manual(values = rainbow(10)) +\n  scale_y_reverse() + \n  guides(fill = guide_legend(nrow = 1, title = NULL))+ \n  coord_equal() +\n  theme_void() +\n  theme(legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.text = element_text(size = 9, margin = margin(l = -17, unit = \"pt\")))\n\n\n\nBoth figures look noisy. There’s no pattern at all for these two\nfamous numbers.\n\n\n\n",
    "preview": "posts/2022-08-01-pi-digits/pi-digits_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-08-01T02:47:15-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2022-07-21-logit-expit/",
    "title": "Base R's built-in logit and expit functions",
    "description": "`plogis()` and `qlogis()`",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2022-07-21",
    "categories": [
      "functions"
    ],
    "contents": "\nI did not know there were built-in functions in base R\nfor calculating the logit and expit… until today.\nFirst, recall that the logit function for any \\(x \\in (0,1)\\) is\n\\[\nlogit(x) = log\\left(\\frac{x}{1-x}\\right).\n\\]\n\n\n\nWhen working with categorical data, we can think of \\(x\\) here as a probability of success. Hence\nthe logit of \\(x\\) is the log odds\nratio of the probability of success over the probability of failure.\nTo obtain the log odds for a given probability in R, we\ncould do…\n\n\nprob <- 0.2\nlog(prob / (1 - prob))\n\n[1] -1.386294\n\nor simply with qlogis(), as I just discovered…\n\n\nqlogis(prob)\n\n[1] -1.386294\n\nOn the other hand, the expit function for any \\(x \\in \\mathbb{R}\\) is\n\\[\nexpit(x) = \\frac{e^x}{1+e^x}.\n\\]\n\n\n\nThe expit maps the real numbers to \\((0,\n1)\\). It is also known as the inverse logit function, or the\nsigmoid function, which is very popular in deep nets.\nYou’ve probably done this type of conversion before, in a logistic\nregression setting. When making a prediction after fitting a model and\nyou’re being ask to give a probability, this is exactly what you would\ndo.\nJust as before, we could do it “by hand”…\n\n\nlogit <- 0.3\nexp(logit) / (1 + exp(logit))\n\n[1] 0.5744425\n\nor with a more simple function, plogis()…\n\n\nplogis(logit)\n\n[1] 0.5744425\n\nFrom my personal experience, I have written down the full formula for\nboth logit and expit many times and forgotten a parenthesis here and\nthere every so often. This is where plogis and\nqlogis will come in handy. More simple. Less code writing.\nAnd no more errors related to ()’s.\n\n\n\n",
    "preview": "posts/2022-07-21-logit-expit/logit-expit_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2022-07-21T12:45:20-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 960
  },
  {
    "path": "posts/2022-04-20-latex-plot/",
    "title": "LaTeX Font for Data Viz in R",
    "description": "For future reference",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2022-04-21",
    "categories": [
      "data viz",
      "ggplot2",
      "LaTeX"
    ],
    "contents": "\n\nContents\nSet up\nbase R\nggplot2\n\nSo… I had been wondering about how to change the font when making data viz in R to the \\(\\LaTeX\\) font (Computer Modern). Turns out, it’s not that complicated.\nSet up\n(Note: The set up shown below is for a Mac device. I imagine it’d be something similar for Windows.)\nI first downloaded the Computer Modern font (with .ttf file extension) from the internet. It is available on a few different websites, and the one I ended up with was https://www.fontsquirrel.com/fonts/computer-modern.\nI then imported the unzipped folder of the downloaded font file to the Font Book app.\nAnd… the set up is basically it. Now, let’s make some data viz. First, let’s quickly generate some data.\n\n\nset.seed(100)\nx <- rnorm(100)\ny <- x + rnorm(100)\n\n\n\nI’m going to illustrate this for both base plotting and ggplot2.\nbase R\nBy default, the font of a base R plot looks like this:\n\n\nplot(x,\n     y,\n     main = \"A simple scatterplot\",\n     xlab = \"Explanatory Variable\",\n     ylab = \"Response Variable\")\n\n\n\n\nTo apply the \\(\\LaTeX\\) font (or any font you want), use the good ol’ par() function, and specify family = \"the font name\" inside of par(). Here, the name of the font is “CMU Serif”.\n\n\npar(family = \"CMU Serif\")\nplot(x,\n     y,\n     main = \"A Simple Scatterplot\",\n     xlab = \"Explanatory Variable\",\n     ylab = \"Response Variable\")\n\n\n\n\n(I’m sure there are other ways of doing this in base R too…)\nggplot2\nFor ggplot2, the default theme appears like this:\n\n\nlibrary(tidyverse)\np <- tibble(x, y) %>% \n  ggplot(aes(x, y)) +\n  geom_point() +\n  labs(x = \"Explanatory Variable\",\n       y = \"Response Variable\",\n       title = \"A Simple Scatterplot\")\np\n\n\n\n\nWe can then call theme() to customize the text font.\n\n\np +\n  theme(text = element_text(family = \"CMU Serif\"))\n\n\n\n\nOf course, we can also do this separately for the different individual theme components (axis.text, plot.title, etc.) of ggplot2.\nTa-da!\n(I haven’t blogged in awhile. This is my first blog since last August, before I moved to Chicago. Feels great to be back blogging again.)\n\n\n\n",
    "preview": "posts/2022-04-20-latex-plot/latex-ggplot.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 720,
    "preview_height": 720
  },
  {
    "path": "posts/2021-08-17-epl-scoring-time-shiny/",
    "title": "EPL Goal Scoring Time Data Shiny App",
    "description": "My first Shiny app.",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-08-24",
    "categories": [
      "shiny",
      "football",
      "goals"
    ],
    "contents": "\n\nContents\nDescription\nExploring\nFamous Goals\nEDA\n\n\nOne of the items on my to-do list for this summer is to learn and make a Shiny app. I finally did it! Check out the app here.\n\nDescription\nThis is a very simple Shiny app which provides data on all goal scoring events in the English Premier League, from its first season, 1992-93, to the last completed season, 2020-21.\nThe data were obtained from transfermarkt. In this dataset, the most important feature is the scoring time (in minute) of each goal. As improbable as it may seem, it is impossible (at least for me) to find nicely clean and publicly available data on this specific piece of information. Back in 2019-2020 when I was working on my undergraduate honors thesis on modeling EPL goal scoring, due to the amount of time and most importantly data science skills I had back then, I couldn’t either find a dataset on scoring time, or scrape the extremely messy data from the web, so I ended up collecting the data by hand. Thus, this is my motivation for developing this app.\nI certainly would like to add more information to this data, such as the dates and kick-off times of the matches. There are also several issues with this app that need to be addressed in the future. In particular, the data do not specify whether a goal was an own-goal or not. As a result, the variable goal scorer represents players that scored both for and against their team. Another problem I noticed was for the scoring events in the early seasons (1990s), most goals scored during injury time of both halves had 45 (for first half) and 90 (for second half) as the scoring minutes, which did not express how much deep into stoppage time at which the goals occurred. There are other data sources out there that I have not explored which will probably help me fix this issue.\nAs usual, the source code for this project can be found on GitHub.\nExploring\nLet’s quickly explore the EPL goal scoring data provided by my new Shiny app.\n\n\nlibrary(tidyverse)\nlibrary(kableExtra)\ntheme_set(theme_bw())\n\n\n\n\n\ngoals <- read_csv(\"goals.csv\")\n\n\n\nFamous Goals\nIf you are a long time follower of the EPL, these famous goals should be familiar to you.\nBeckham from the halfway line\n\n\ngoals %>% \n  filter(goal_scorer == \"David Beckham\" & season == \"1996-1997\" & matchweek == 1) %>% \n  kable()\n\n\n\nseason\n\n\nmatchweek\n\n\nhome_club\n\n\naway_club\n\n\nfinal_score\n\n\ngoal_club\n\n\ngoal_scorer\n\n\nminute\n\n\n1996-1997\n\n\n1\n\n\nWimbledon FC\n\n\nMan Utd\n\n\n0:3\n\n\nMan Utd\n\n\nDavid Beckham\n\n\n90\n\n\n\nRooney’s bicycle-kick\n\n\ngoals %>% \n  filter(goal_scorer == \"Wayne Rooney\" & season == \"2010-2011\" & matchweek == 27) %>% \n  kable()\n\n\n\nseason\n\n\nmatchweek\n\n\nhome_club\n\n\naway_club\n\n\nfinal_score\n\n\ngoal_club\n\n\ngoal_scorer\n\n\nminute\n\n\n2010-2011\n\n\n27\n\n\nMan Utd\n\n\nMan City\n\n\n2:1\n\n\nMan Utd\n\n\nWayne Rooney\n\n\n78\n\n\n\nThe Hat-trick by number 20 to clinch title number 20 for Man United\n\n\ngoals %>% \n  filter(goal_scorer == \"Robin Van Persie\" & season == \"2012-2013\" & matchweek == 34) %>% \n  kable()\n\n\n\nseason\n\n\nmatchweek\n\n\nhome_club\n\n\naway_club\n\n\nfinal_score\n\n\ngoal_club\n\n\ngoal_scorer\n\n\nminute\n\n\n2012-2013\n\n\n34\n\n\nMan Utd\n\n\nAston Villa\n\n\n3:0\n\n\nMan Utd\n\n\nRobin Van Persie\n\n\n2\n\n\n2012-2013\n\n\n34\n\n\nMan Utd\n\n\nAston Villa\n\n\n3:0\n\n\nMan Utd\n\n\nRobin Van Persie\n\n\n13\n\n\n2012-2013\n\n\n34\n\n\nMan Utd\n\n\nAston Villa\n\n\n3:0\n\n\nMan Utd\n\n\nRobin Van Persie\n\n\n33\n\n\n\nAnd yes…93:20\n\n\ngoals %>% \n  filter(goal_scorer == \"Sergio Aguero\" & minute == \"90+4\") %>% \n  kable()\n\n\n\nseason\n\n\nmatchweek\n\n\nhome_club\n\n\naway_club\n\n\nfinal_score\n\n\ngoal_club\n\n\ngoal_scorer\n\n\nminute\n\n\n2011-2012\n\n\n38\n\n\nMan City\n\n\nQPR\n\n\n3:2\n\n\nMan City\n\n\nSergio Aguero\n\n\n90+4\n\n\n\nEDA\nWho were the Top 5 All-Time EPL Goal Scorers?\n\n\ngoals %>% \n  count(goal_scorer, sort = TRUE) %>% \n  slice_head(n = 5) %>% \n  kable()\n\n\n\ngoal_scorer\n\n\nn\n\n\nAlan Shearer\n\n\n260\n\n\nWayne Rooney\n\n\n209\n\n\nAndy Cole\n\n\n187\n\n\nSergio Aguero\n\n\n184\n\n\nFrank Lampard\n\n\n178\n\n\nWhich players have scored more than 30 goals in a season?\n\n\ngoals %>% \n  count(goal_scorer, season, sort = TRUE) %>% \n  filter(n >= 30) %>% \n  kable()\n\n\n\ngoal_scorer\n\n\nseason\n\n\nn\n\n\nAlan Shearer\n\n\n1994-1995\n\n\n34\n\n\nAndy Cole\n\n\n1993-1994\n\n\n34\n\n\nMohamed Salah\n\n\n2017-2018\n\n\n32\n\n\nAlan Shearer\n\n\n1993-1994\n\n\n31\n\n\nAlan Shearer\n\n\n1995-1996\n\n\n31\n\n\nCristiano Ronaldo\n\n\n2007-2008\n\n\n31\n\n\nLuis Suarez\n\n\n2013-2014\n\n\n31\n\n\nHarry Kane\n\n\n2017-2018\n\n\n30\n\n\nKevin Phillips\n\n\n1999-2000\n\n\n30\n\n\nRobin Van Persie\n\n\n2011-2012\n\n\n30\n\n\nThierry Henry\n\n\n2003-2004\n\n\n30\n\n\n(Note: There were 22 clubs and 42 matchweeks in the first 3 EPL seasons (92-93, 93-94, 94-95), before the number of clubs was reduced to 20 (hence 38 matchweeks) at the start of 95-96.)\nWhat are the highest-scoring teams in the EPL history?\n\n\ngoals %>% \n  count(goal_club, season, sort = TRUE) %>% \n  filter(n >= 90) %>% \n  kable()\n\n\n\ngoal_club\n\n\nseason\n\n\nn\n\n\nMan City\n\n\n2017-2018\n\n\n106\n\n\nChelsea\n\n\n2009-2010\n\n\n103\n\n\nMan City\n\n\n2013-2014\n\n\n102\n\n\nMan City\n\n\n2019-2020\n\n\n102\n\n\nLiverpool\n\n\n2013-2014\n\n\n101\n\n\nMan Utd\n\n\n1999-2000\n\n\n97\n\n\nMan City\n\n\n2018-2019\n\n\n95\n\n\nMan City\n\n\n2011-2012\n\n\n93\n\n\nWhat is the goal scoring trend since 2010?\n\n\ngoals %>% \n  filter(as.numeric(str_sub(season, end = -6)) > 2009) %>% \n  mutate(season = str_replace(season, \"-\", \"-\\n\")) %>% # re-format season\n  count(season) %>% \n  ggplot(aes(x = season, y = n, group = 1)) +\n  geom_point(aes(size = n), show.legend = FALSE) +\n  geom_line() +\n  labs(title = \"2014-2015 was a low-scoring season\")\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-08-17-epl-scoring-time-shiny/shiny_screenshot.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 2054,
    "preview_height": 1038
  },
  {
    "path": "posts/2021-08-06-climbing-p3-swapping/",
    "title": "Sport Climbing at Tokyo 2020, Part III: Rank Swapping",
    "description": "A competition of small margins.",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-08-07",
    "categories": [
      "sport climbing",
      "2020 olympics",
      "rankings"
    ],
    "contents": "\n\nContents\nIntroduction\nAnalysis\nData Prep\nSwapping ranks 1 and 2\n\n\nThis is the third post in a series about sport climbing at the 2020 Summer Olympics. In the first and second blog posts, I analyzed the ranking system of sport climbing using both simulated data and historical results from recent tournaments. This time, I’m going to continue to address the limitations of this scoring format, utilizing brand new data from Tokyo 2020.\nIntroduction\nSport climbing at Tokyo 2020 has concluded, and it can only mean one thing: there’s more data to analyze. Previously, I pointed out several problems with sport climbing’s scoring system; in particular, the disadvantage that speed climbers are facing under this format, and how this ranking system violates the independence of irrelevant alternatives property. (i.e. there’s great dependence on irrelevant (lower-ranked) climbers).\n\nIn this edition, I’m going to conduct a sensitivity (what-if) analysis on the overall results of sport climbing at the 2020 Summer Olympics. The main motivated question for this post is: “What would happen to the overall rankings if the ranks within an individual climbing discipline are being swapped?”\nAnalysis\nData Prep\nThe analysis that follows is going to center around the men’s finals of sport climbing at Tokyo 2020. The data were obtained from the Wikipedia page of the men’s event (here’s the scraping script if you’re interested).\n\n\nShow code\n\nlibrary(tidyverse)\ntheme_set(theme_light())\n\nmf <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/climbing/main/data/2020_olympics/mf.csv\") %>% \n  mutate(climber = paste(str_sub(climber, 1, 1), word(climber, -1))) # shorten climber's name\n\n\n\nLet’s begin by writing a helper function to perform rank swapping to the final standings.\n\n\n\nShow code\n\nclimbing_swap <- function(df, ranks = c(1, 2)) {\n  speed_swap <- df %>% \n    select(climber, overall, speed, bouldering, lead, total) %>% \n    mutate(speed = ifelse(speed == ranks[1], ranks[2],\n                  ifelse(speed == ranks[2], ranks[1], speed)),\n           total = speed * bouldering * lead,\n           overall = rank(total, ties.method = \"first\"),\n           type = paste(\"Swap speed ranks\", ranks[1], \"&\", ranks[2]))\n  \n  bouldering_swap <- df %>% \n    select(climber, overall, speed, bouldering, lead, total) %>% \n    mutate(bouldering = ifelse(bouldering == ranks[1], ranks[2],\n                          ifelse(bouldering == ranks[2], ranks[1], bouldering)),\n           total = speed * bouldering * lead,\n           overall = rank(total, ties.method = \"first\"),\n           type = paste(\"Swap bouldering ranks\", ranks[1], \"&\", ranks[2]))\n  \n   lead_swap <- df %>% \n    select(climber, overall, speed, bouldering, lead, total) %>% \n    mutate(lead = ifelse(lead == ranks[1], ranks[2],\n                          ifelse(lead == ranks[2], ranks[1], lead)),\n           total = speed * bouldering * lead,\n           overall = rank(total, ties.method = \"first\"),\n           type = paste(\"Swap lead ranks\", ranks[1], \"&\", ranks[2]))\n   \n   swap <- df %>% \n     mutate(type = \"Original\") %>% \n     bind_rows(speed_swap) %>% \n     bind_rows(bouldering_swap) %>% \n     bind_rows(lead_swap) %>% \n     mutate(climber = fct_rev(factor(climber, levels = df$climber)),\n            medal = ifelse(overall == 1, \"gold\",\n                        ifelse(overall == 2, \"silver\",\n                               ifelse(overall == 3, \"bronze\", \"none\"))),\n            type = factor(type, \n                          levels = c(\"Original\",\n                                     paste(\"Swap speed ranks\", ranks[1], \"&\", ranks[2]),\n                                     paste(\"Swap bouldering ranks\", ranks[1], \"&\", ranks[2]),\n                                     paste(\"Swap lead ranks\", ranks[1], \"&\", ranks[2]))))\n   return(swap)\n}\n\n\n\nSwapping ranks 1 and 2\nLet’s first filter out the 8th-ranked climber (Bassa Mawem), since he got injured before the start of the finals; hence was not able to play for a medal and was placed 8th in all three events. Thus swapping the top 2 in any event is not going to affect his score line. (Why didn’t they replace him with somebody else? If they did, would they use the qualification results with or without him? That’s something to think about.)\n\n\nShow code\n\nmf_swap_12 <- climbing_swap(mf, ranks = c(1, 2)) %>% \n  filter(overall < 8)\n\n\n\nNow I’m going to make a couple of plots to illustrate the changes to the overall orderings of climbers after switching the first and second positions in each of the three climbing concentrations. First, below is a figure of multi-panel plots showing the modified leaderboard in each case after swapping alongside the original final standings.\n\n\nShow code\n\nmf_swap_12 %>% \n  ggplot(aes(x = climber, y = total, fill = medal)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = overall), hjust = -0.2, size = 3) +\n  coord_flip() +\n  facet_wrap(~ type) +\n  scale_fill_manual(values = c(\"#A77044\", \"#FFD700\", \"#95BFE5\", \"#C0C0C0\")) +\n  labs(subtitle = \"Modified rankings after swapping ranks 1 and 2 - Tokyo 2020 Men's Finals\",\n       y = \"Score\",\n       x = NULL) +\n  theme(strip.background = element_rect(fill = \"midnightblue\"))\n\n\n\n\nAnd second, here’s a bump chart showing the rankings across the different types of rank modification.\n\n\nShow code\n\nlibrary(ggbump)\nmf_swap_12 %>% \n  ggplot(aes(type, overall, group = climber, color = climber)) +\n  geom_bump(size = 3, smooth = 20) +\n  geom_point(size = 5) +\n  scale_y_reverse(breaks = 1:7) +\n  scale_x_discrete(labels = c(\"Original\", \"Swap speed\", \"Swap bouldering\", \"Swap lead\")) +\n  theme(axis.title = element_blank()) +\n  scale_color_ordinal() +\n  labs(subtitle = \"Modified rankings after swapping ranks 1 and 2 - Tokyo 2020 Men's Finals\")\n\n\n\n\nThere are lots of stories to tell from the two figures above. The two major ones are:\nEach swap gives us a different overall winner. In the case of swapping ranks 1 and 2 of speed climbing, it’s Narasaki going from 4th to 1st. For bouldering, it’s Mawem going from 5th to claim gold. And for lead, it’s Ondra jumping 5 spots from 6th to earn the victory medal. None of these athletes were in the actual top 3 in Tokyo.\nThings could have easily been very different for the top 3 finishers. Swapping ranks 1 and 2 of speed would have put the gold medalist, Lopez, down 5 positions to 6th overall. Likewise, the silver medal winner, Coleman, would have fallen 4 spots to 6th if there was a change in the finishing order of the top 2 bouldering athletes. And even worse, Schubert, who won bronze in Tokyo, could have easily had the worst record among the active final competitors, if number 1 and 2 in lead climbing switched places.\nThe margin of victory is as narrow as it could get. Anyone could have gone from hero to zero (and vice versa) very quickly. Crazy. Wild. Insane.\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-08-06-climbing-p3-swapping/climbing-p3-swapping_files/figure-html5/unnamed-chunk-5-1.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 960
  },
  {
    "path": "posts/2021-07-31-climbing-p2-format/",
    "title": "Sport Climbing at Tokyo 2020, Part II: Competition Format",
    "description": "Who's Suffering? Who's Relevant?",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-08-01",
    "categories": [
      "sport climbing",
      "2020 olympics",
      "rankings"
    ],
    "contents": "\n\nContents\nBackground\nWho’s Suffering?\nWho’s Relevant?\nTakeaways\n\nThis is the second post in a series about sport climbing at the 2020 Summer Olympics. In the first post, I performed a simulation study to examine scoring and rankings in sport climbing. This time, using data from major sport climbing competitions in recent years, I’m going to dive into the combined competition format and find out whether this format is appropriate for climbing athletes.\nBackground\nAfter the announcement of the decision to combine the three climbing disciplines (speed climbing, bouldering, lead climbing) at the 2020 Summer Olympics and only award one set of medals for each gender competition, the climbing world strongly reacted. Numerous climbers all over the world spoke out and shared their concerns about this new competition format. Here are some quotes from a series of Climbing Magazine interviews in 2016:\n\n“I am NOT in support of the format that imposes that all climbers must compete in speed climbing. That is like asking a middle distance runner to compete in the sprint. Speed climbing is a sport within our sport.” - Lynn Hill\n\n\n“Though sport and bouldering are more similar than speed, they still are different disciplines. Speed climbers will have the biggest disadvantage because their realm isn’t based on difficult movements.” - Courtney Woods\n\n\n“Honestly, the people that will suffer the most are the ones that focus only on speed climbing. Those skills/abilities don’t transfer as well to the other disciplines.” - Mike Doyle\n\nOther climbers used words and phrases like “bogus”, “a bummer”, “less than ideal”, and “cheesy and unfair” to describe the new format. A number of them also called for changes in future competitions, with suggestions like giving each event its own set of medals, or excluding speed and only including bouldering and lead.\nUndoubtedly, the combined format decision received lots of thumbs-down. The question here is: Are the concerns about the new format valid? Let’s use statistics to find out.\nWho’s Suffering?\nFirst, I’m going to look at the correlations between the overall rank and the ranks of the disciplines (speed, bouldering, and lead). I scraped data from the 2018 Youth Olympics (the scraping code can be found here if you’re interested), and computed Kendall’s tau (a nonparametric measure of ordinal association) for the ranked variables in the data. In the analysis that follows, I’m going to use data from the qualification rounds of both men’s and women’s competitions at the 2018 Youth Olympics.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(kableExtra)\ntheme_set(theme_light())\n\nmq <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/climbing/main/data/2018_youth_olympics/men_qual.csv\")\nwq <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/climbing/main/data/2018_youth_olympics/women_qual.csv\")\n\nlibrary(GGally)\nmq %>% \n  select(Overall = rank, Speed = speed, Bouldering = bould, Lead = lead) %>% \n  ggpairs(diag = \"blank\",\n          axisLabels = \"none\",\n          upper = list(continuous = wrap(\"cor\", method = \"kendall\", stars = FALSE))) +\n  theme(panel.grid.major = element_blank())\n\n\n\nShow code\n\nwq %>% \n  select(Overall = rank, Speed = speed, Bouldering = bould, Lead = lead) %>% \n  ggpairs(diag = \"blank\",\n          axisLabels = \"none\",\n          upper = list(continuous = wrap(\"cor\", method = \"kendall\", stars = FALSE))) +\n  theme(panel.grid.major = element_blank())\n\n\n\n\nFrom the figures above, there’s a fairly strong and positive relationship between bouldering and lead climbing ranks. These two variables are also highly correlated with the final ranking. On the flip side, the speed rank doesn’t seem to have much of a correlation with the other two events’ as well as with the overall rank. The climbers were absolutely right. As they pointed out in the interviews mentioned earlier, the three different climbing disciplines demand different sets of skills and, often, athletes specialize in a single event. Including speed climbing with bouldering and lead climbing is not the best idea. The idea of a climbing triathlon format gives a major disadvantage to speed climbers.\nSpeaking of speed climbing, after the first blog post was shared on Twitter, @jchaskell2 replied with a suggestion:\n\n\nHave you looked at what the expected placement is for someone who goes 1x8x8 in the final? This is a legit likely score for the top speed climber.\n\n— Jen Haskell (@jchaskell2) July 31, 2021\n\nThis was brought up because in my previous post, I did some analyses on the probability of winning a medal given that a climber wins the first event, which happens to be speed climbing at this year’s Olympics. I went and ran a quick simulation study, where for each simulation, I first simulated one climber with the 1-8-8 scoring scheme, and then uniformly assigned the ranks for the remaining athletes.\n\n\nShow code\n\nset.seed(1)\nnsim <- 10000\nnplay <- 8\n\nspec <- tibble(e1 = rep(1, nsim), \n       e2 = rep(nplay, nsim), \n       e3 = rep(nplay, nsim),\n       sim = 1:nsim) %>% \n  group_by(sim) %>% \n  mutate(player = sample(1:nplay, 1, replace = TRUE)) %>% \n  ungroup()\n\n\nsim <- tibble(player = 1:nplay) %>% \n  slice(rep(row_number(), nsim)) %>% \n  mutate(sim = rep(1:nsim, each = nplay)) %>% \n  anti_join(spec) %>% \n  group_by(sim) %>% \n  mutate(e1 = sample(2:nplay, replace = FALSE),\n         e2 = sample(1:(nplay - 1), replace = FALSE),\n         e3 = sample(1:(nplay - 1), replace = FALSE)) %>% \n  ungroup() %>% \n  bind_rows(spec) %>% \n  arrange(sim, player) %>% \n  mutate(score = e1 * e2 * e3) %>% \n  group_by(sim) %>% \n  mutate(rank = rank(score, ties.method = \"random\")) %>%\n  ungroup()\n\nres <- sim %>% \n  filter(e1 == 1 & e2 == 8 & e3 == 8) %>% \n  count(rank) %>% \n  mutate(prob = n / sum(n),\n         cum_prob = cumsum(prob))\n\n\n\nHere are numerical and visual summaries of the simulated data.\n\n\nShow code\n\nres %>% \n  kable()\n\n\n\nrank\n\n\nn\n\n\nprob\n\n\ncum_prob\n\n\n2\n\n\n3\n\n\n0.0003\n\n\n0.0003\n\n\n3\n\n\n292\n\n\n0.0292\n\n\n0.0295\n\n\n4\n\n\n2778\n\n\n0.2778\n\n\n0.3073\n\n\n5\n\n\n4874\n\n\n0.4874\n\n\n0.7947\n\n\n6\n\n\n1921\n\n\n0.1921\n\n\n0.9868\n\n\n7\n\n\n132\n\n\n0.0132\n\n\n1.0000\n\n\n\n\nShow code\n\nres %>% \n  mutate(rank = factor(rank)) %>% \n  ggplot(aes(x = rank, y = n)) +\n  geom_col() +\n  coord_flip() +\n  geom_text(aes(label = prob), hjust = -0.1, size = 3) +\n  expand_limits(y = 5010) +\n  ggtitle(\"Rank distribution for 1-8-8 climbers\")\n\n\n\n\nSure enough, being good at speed climbing doesn’t guarantee you a top 3 finish. In fact, according to my simulations, the chance of winning a medal for a 1-8-8 combination is very small - only 2.95%. Moreover, in almost half of the simulations, a 1-8-8 climber got 5th position in the standings.\n\n\nShow code\n\nres %>% \n  summarize(expected_rank = sum(rank * prob)) %>% \n  kable()\n\n\n\nexpected_rank\n\n\n4.8814\n\n\nFinally, to answer @jchaskell2’s initial question, the expected placement for an athlete that goes 1-8-8 in the finals is 4.88, just slightly below 5, which doesn’t put them in a medalist position. I did mention the importance of getting off to a great start under this combined competition format in my simulation blog post. Well, this extreme case is an example where a perfect start isn’t good enough.\nWho’s Relevant?\nThis section is motivated by one question: What would happen to the rankings if one climber was left out?\nThe idea of Independence of Irrelevant Alternatives (IIA) comes up here. In layman’s terms, IIA is a rule which states that the results (rankings) of a competition should not change if a losing party is excluded.\nLet’s continue to use data from the 2018 Youth Olympics, but this time I’m going to examine the final rankings of both male and female events. The data manipulating process here is very simple: after an athlete is dropped, the new ranks for each discipline of the remaining players are calculated. The new final scores can then be obtained (by multiplying the three event ranks), which determines the new overall ranks.\n\n\nShow code\n\nwf <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/climbing/main/data/2018_youth_olympics/women_final.csv\")\nmf <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/climbing/main/data/2018_youth_olympics/men_final.csv\")\n\ndrop_rerank <- function(df) {\n  rerank <- list()\n  for (i in 1:nrow(df)) {\n    rerank[[i]] <- df[-i, ] %>%\n      mutate(rank_drop = i)\n  }\n  \n  rerank_df <- df %>%\n    mutate(rank_drop = 0) %>%\n    bind_rows(rerank) %>%\n    group_by(rank_drop) %>%\n    mutate(\n      speed = rank(speed),\n      bould = rank(bould),\n      lead = rank(lead),\n      total = speed * bould * lead\n    ) %>%\n    arrange(total, .by_group = TRUE) %>%\n    ungroup() %>%\n    group_by(rank_drop, total) %>%\n    mutate(\n      speed_tb = ifelse(speed < lag(speed), 1, 0),\n      bould_tb = ifelse(bould < lag(bould), 1, 0),\n      lead_tb = ifelse(lead < lag(lead), 1, 0),\n      tb = speed_tb + bould_tb + lead_tb,\n      tb = ifelse(is.na(tb), 1, tb)\n    ) %>%\n    ungroup() %>%\n    group_by(rank_drop) %>%\n    arrange(total,-tb, .by_group = TRUE) %>%\n    mutate(rank = row_number(),\n           last = str_to_title(last))\n  \n  return(rerank_df)\n}\n\n\n\nThe figures below shows the changes to orderings of the men’s and women’s rankings when one climber is excluded. The panel number represents the rank of the contestant that was left out, with 0 being the actual standings of finalists. Instances where a change in rankings occurred are each highlighted by a black rectangular plot border, whereas players experiencing a position change are highlighted by red-filled bars.\n\n\nShow code\n\ndrop_rerank(mf) %>% \n  mutate(last = fct_reorder(last, -rank),\n         rank = as.factor(rank),\n         rank_change = ifelse(\n           rank_drop %in% c(0, 4) | \n             rank_drop == 1 & rank %in% 4:5 |\n              rank_drop == 2 & rank %in% c(1, 5) |\n                rank_drop %in% c(3, 5) & rank %in% c(1, 2, 5) |\n                  rank_drop == 6 & rank %in% 1:3, \n           \"no\", \"yes\")) %>% \n  ggplot(aes(x = last, y = total, fill = rank_change)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = rank), hjust = -0.2, size = 3) +\n  coord_flip() +\n  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),\n            data = ~ filter(., rank_drop %in% c(1, 2, 3, 5, 6)), \n            color = \"black\", size = 1.5, fill = NA, inherit.aes = FALSE) +\n  facet_wrap(~ rank_drop, nrow = 2) +\n  expand_limits(y = 102, x = 0:7) +\n  scale_fill_manual(values = c(\"grey\", \"chocolate\")) +\n  labs(y = \"Score\", \n       x = \"Climber\",\n       title = \"Leave-one-climber-out Plot - 2018 Youth Olympics Men's Competition\") +\n  theme(axis.ticks = element_blank(),\n        panel.grid.minor = element_blank())\n\n\n\nShow code\n\ndrop_rerank(wf) %>% \n  mutate(last = fct_reorder(last, -rank),\n         rank = as.factor(rank),\n         rank_change = ifelse(\n           rank_drop %in% c(0, 1, 4, 6) |\n             rank_drop == 2 & rank %in% 1:3 |\n              rank_drop == 3 & rank %in% c(1, 4, 5) |\n                rank_drop == 5 & rank %in% c(1, 5),\n           \"no\", \"yes\")) %>%\n  ggplot(aes(x = last, y = total, fill = rank_change)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = rank), hjust = -0.2, size = 3) +\n  coord_flip() +\n  geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),\n            data = ~ filter(., rank_drop %in% c(2, 3, 5)), \n            color = \"black\", size = 1.5, fill = NA, inherit.aes = FALSE) +\n  facet_wrap(~ rank_drop, nrow = 2, ncol = 4) +\n  expand_limits(y = 62, x = 0:7) +\n  scale_fill_manual(values = c(\"grey\", \"red\")) +\n  labs(y = \"Score\", \n       x = \"Climber\",\n       title = \"Leave-one-climber-out Plot - 2018 Youth Olympics Women's Competition\") +\n  theme(axis.ticks = element_blank(),\n        panel.grid.minor = element_blank())\n\n\n\n\nThere are two very interesting cases here, where significant changes happened to the original rankings:\nA lower-ranked climber is excluded (IIA)\nPanel 5 of the women’s event is a perfect example of this situation. If fifth-ranked Krasovskaia was dropped, Meul, who finished fourth overall in real life, would jump two spots to take the silver medal. Bronze medalist Lammer would now be in fourth place. The IIA criterion is violated.\nA higher-ranked climber is excluded\nPanels 1 and 2 of the men’s competition are good illustrations of this case. If first-ranked Dohi was excluded, Schenk, whose actual rank was fourth and did not earn a medal, would suddenly move up to claim gold. How wild! Similarly, if the silver medal recipient Tanaka was left out, fifth-ranked Pan would leap ahead two spots to second and win silver.\nTakeaways\nThis format (competition + scoring) is certainly not the best idea. Combining speed climbing, bouldering, and lead climbing isn’t a good idea either. Speed climbing needs to be separated and have its own set of medals.\nBy the way, there’s a paper in progress. As always, comments and suggestions are greatly appreciated.\n\n\n\n",
    "preview": "posts/2021-07-31-climbing-p2-format/climbing-p2-format_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 960
  },
  {
    "path": "posts/2021-07-31-climbing-p1-sim/",
    "title": "Sport Climbing at Tokyo 2020, Part I: A Simulation Study",
    "description": "Simulation time!",
    "author": [
      {
        "name": "Quang Nguyen",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-07-31",
    "categories": [
      "sport climbing",
      "2020 olympics",
      "simulation"
    ],
    "contents": "\n\nContents\nIntroduction\nData Prep\nQualification\nFinals\nFuture Work\n\nThis is the first post in a series about sport climbing at the 2020 Summer Olympics. In this post, I’m going to conduct a simple simulation study to examine scoring and rankings for Olympics climbers.\nIntroduction\nSport climbing at the 2020 Summer Olympics in Tokyo, Japan begins August 3. It is one of the five new sports introduced at Tokyo 2020, alongside baseball/softball, karate, skateboarding, and surfing. Sport climbing at Tokyo 2020 consists of two events, one for male and one for female, with only one set of medal being awarded per gender. Each event includes two phases: qualification and finals. For each round, climbers compete in three disciplines: speed climbing, bouldering, and lead climbing. Both men’s and women’s competition begin with 20 climbers, with 8 being selected to move on to the final stage, based on rankings. A climber’s performance is determined by a combined score, which is computed as a the product of the ranks across three disciplines. At the end of each round, athletes are ranked based on their combined scores, meaning that the 8 climbers with the lowest product of ranks advance to the finals and the top 3 finalists with the lowest rank product win gold, silver, and bronze, respectively.\nThe focus of this post is going to be on a simulation study examining the performances of climbers in both qualification and finals. 10000 simulations are executed for each round, as the event ranks (1-20 for qualification, 1-8 for finals) are randomly assigned to the athletes, assuming a uniform distribution for the ranks. The final scores and final rankings are also going to be calculated, and I’m going to utilize this data to answer questions regarding scoring and probability of finishing at certain ranking positions.\nData Prep\n\n\nlibrary(tidyverse)\nlibrary(kableExtra)\ntheme_set(theme_light())\n\n\n\nLet’s first write a function to simulate the climbing competitions for any given number of climbers. This function takes in the number of simulations and players and returns a simulated data frame with the following attributes: player ID, the rank for each discipline, final combined score, final rank, and simulation number. In this particular case, I’m going to use this function to simulate both qualification (20 climbers) and final (8 climbers) rounds of sport climbing.\n\n\nclimbing_sim <- function(nsim = 10000, nplay) {\n  sims <- list()\n  for (i in 1:nsim) {\n    sims[[i]] <-\n      bind_cols(\n        player = 1:nplay,\n        e1 = sample(1:nplay, replace = FALSE),\n        e2 = sample(1:nplay, replace = FALSE),\n        e3 = sample(1:nplay, replace = FALSE)\n      ) %>%\n      mutate(sim = i)\n  }\n  results <- bind_rows(sims) %>% \n    mutate(score = e1 * e2 * e3) %>% \n    group_by(sim) %>% \n    mutate(rank = rank(score, ties.method = \"random\")) %>%\n    ungroup()\n  \n  return(results)\n}\n\nset.seed(1)\nqual <- climbing_sim(nsim = 10000, nplay = 20)\nfinal <- climbing_sim(nsim = 10000, nplay = 8)\n\n\n\nTo get the analysis stage started, here are visual and numerical summaries of the total scores obtained from our simulations for qualification and final rounds.\n\n\nShow code\n\nqual_final <- qual %>% \n  mutate(round = \"Qualification\") %>% \n  bind_rows(mutate(final, round = \"Final\")) %>% \n  mutate(round = fct_rev(round))\nqual_final %>%\n  ggplot(aes(score)) +\n  geom_histogram(bins = 20, fill = \"gray\", color = \"white\") + \n  facet_wrap(~ round, scales = \"free\") +\n  labs(x = \"Score\",\n       y = \"Frequency\")\n\n\n\n\n\n\nShow code\n\nlibrary(mosaic)\nfavstats(score ~ round, data = qual_final) %>% \n  select(-missing) %>% \n  kable()\n\n\n\nround\n\n\nmin\n\n\nQ1\n\n\nmedian\n\n\nQ3\n\n\nmax\n\n\nmean\n\n\nsd\n\n\nn\n\n\nQualification\n\n\n1\n\n\n240\n\n\n684\n\n\n1638\n\n\n8000\n\n\n1158.84378\n\n\n1273.47884\n\n\n200000\n\n\nFinal\n\n\n1\n\n\n24\n\n\n60\n\n\n126\n\n\n512\n\n\n91.19935\n\n\n91.11065\n\n\n80000\n\n\nQualification\nLet’s begin with a simple question: “If a climber wins any event, what is the probability that they advance to the finals?”\nIn the table below, the column rank represents the every possible qualification finishing position, given that a climber wins at least one event. For each rank, given that a contestant wins any event, n is the number of times that climbers finish at the given rank, prob is the probability of finishing at exactly the given rank, and cum_prob is the probability of finishing at or below the given rank.\n\n\nShow code\n\nwin_any_qual <- qual %>% \n  filter(e1 == 1 | e2 == 1 | e3 == 1) %>% \n  count(rank) %>% \n  mutate(prob = n / sum(n),\n         cum_prob = cumsum(prob))\nwin_any_qual %>% \n  kable() %>% \n  row_spec(1:8, background = \"cornsilk\")\n\n\n\nrank\n\n\nn\n\n\nprob\n\n\ncum_prob\n\n\n1\n\n\n7890\n\n\n0.2761735\n\n\n0.2761735\n\n\n2\n\n\n5943\n\n\n0.2080227\n\n\n0.4841962\n\n\n3\n\n\n4644\n\n\n0.1625538\n\n\n0.6467500\n\n\n4\n\n\n3651\n\n\n0.1277959\n\n\n0.7745458\n\n\n5\n\n\n2766\n\n\n0.0968182\n\n\n0.8713641\n\n\n6\n\n\n1960\n\n\n0.0686058\n\n\n0.9399699\n\n\n7\n\n\n1118\n\n\n0.0391333\n\n\n0.9791032\n\n\n8\n\n\n448\n\n\n0.0156813\n\n\n0.9947846\n\n\n9\n\n\n127\n\n\n0.0044454\n\n\n0.9992299\n\n\n10\n\n\n19\n\n\n0.0006651\n\n\n0.9998950\n\n\n11\n\n\n3\n\n\n0.0001050\n\n\n1.0000000\n\n\n\n\nShow code\n\nwin_any_qual %>% \n  ggplot(aes(rank, weight = prob)) +\n  geom_bar(fill = c(rep(\"gray\", 8), rep(\"black\", 3))) +\n  geom_vline(xintercept = 8.5) +\n  scale_x_continuous(breaks = 1:11) +\n  scale_y_continuous(limits = c(0, 0.3)) +\n  labs(x = \"Rank\",\n       y = \"Probability\",\n       title = \"Probability of finishing at every rank given winning any event\")\n\n\n\n\nIt is clear that a climber will certainly book their ticket to the final round if they win any event, as the probability of finishing at 8th or lower is 0.9948, very close to a perfect 100%.\nWhat if we just focus on winning the first event (speed, in real life)? How often do climbers advance?\n\n\nShow code\n\nwin_first_qual <- qual %>% \n  filter(e1 == 1) %>% \n  count(rank) %>% \n  mutate(prob = n / sum(n),\n         cum_prob = cumsum(prob))\n\nwin_first_qual %>% \n  kable() %>% \n  row_spec(1:8, background = \"cornsilk\")\n\n\n\nrank\n\n\nn\n\n\nprob\n\n\ncum_prob\n\n\n1\n\n\n2999\n\n\n0.2999\n\n\n0.2999\n\n\n2\n\n\n1963\n\n\n0.1963\n\n\n0.4962\n\n\n3\n\n\n1559\n\n\n0.1559\n\n\n0.6521\n\n\n4\n\n\n1269\n\n\n0.1269\n\n\n0.7790\n\n\n5\n\n\n957\n\n\n0.0957\n\n\n0.8747\n\n\n6\n\n\n686\n\n\n0.0686\n\n\n0.9433\n\n\n7\n\n\n363\n\n\n0.0363\n\n\n0.9796\n\n\n8\n\n\n155\n\n\n0.0155\n\n\n0.9951\n\n\n9\n\n\n42\n\n\n0.0042\n\n\n0.9993\n\n\n10\n\n\n6\n\n\n0.0006\n\n\n0.9999\n\n\n11\n\n\n1\n\n\n0.0001\n\n\n1.0000\n\n\n\n\nShow code\n\nwin_first_qual %>% \n  ggplot(aes(rank, weight = prob)) +\n  geom_bar(fill = c(rep(\"gray\", 8), rep(\"black\", 3))) +\n  geom_vline(xintercept = 8.5) +\n  scale_x_continuous(breaks = 1:11) +\n  scale_y_continuous(limits = c(0, 0.3)) +\n  labs(x = \"Rank\",\n       y = \"Probability\",\n       title = \"Probability of finishing at every rank given winning the first event\")\n\n\n\n\nThe results look very similar to the previous analysis. The probability of making to the finals given being event 1 winner for a athlete is also as close to perfect as it could get (0.9951). After winning the first event, a climber is also more likely to finish first more than any other places in the overall qualification standings (almost 30% of the times). Therefore, what climbers should be aware of is getting off to a great start in this combined competition format is crucial.\nWhat is the average score of finalists? What is the distribution of the score for each qualification rank?\n\n\nShow code\n\nqual_avg <- qual %>% \n  group_by(rank) %>% \n  summarize(avg_score = mean(score)) \n\nqual_avg %>%\n  filter(rank <= 10) %>% \n  kable() %>% \n  row_spec(1:8, background = \"cornsilk\")\n\n\n\nrank\n\n\navg_score\n\n\n1\n\n\n36.0187\n\n\n2\n\n\n73.6111\n\n\n3\n\n\n115.3954\n\n\n4\n\n\n162.2263\n\n\n5\n\n\n216.0041\n\n\n6\n\n\n278.1649\n\n\n7\n\n\n350.3272\n\n\n8\n\n\n434.5932\n\n\n9\n\n\n532.1383\n\n\n10\n\n\n642.3298\n\n\n\n\nShow code\n\nqual_avg %>% \n  ggplot(aes(x = rank, y = avg_score)) + \n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\nShow code\n\nqual %>% \n  mutate(rank = factor(rank)) %>% \n  ggplot(aes(x = rank, y = score)) +\n  geom_dotplot(binaxis = \"y\", binwidth = 1) + \n  coord_flip()\n\n\n\n\nFrom the descriptive statistics above, the expected minimum score for finishing in the top 8 and securing a final spot is 434 (rounded down, for 8th rank). Thus, a climber should aim for a total score at or below this threshold. In addition, the plots show that as the rank increases, the distribution of the scores becomes more spread out, and the average score also grows exponentially.\nFinals\nNow, let’s play the same game with the final round, as I’m going to answer similar type of questions for finals as what I had earlier for qualification.\nIf a climber wins any event (or just the first event), what is the probability of them winning a medal?\n\n\nShow code\n\nwin_any_final <- final %>% \n  filter(e1 == 1 | e2 == 1 | e3 == 1) %>% \n  count(rank) %>% \n  mutate(prob = n / sum(n),\n         cum_prob = cumsum(prob))\nwin_any_final %>% \n  kable() %>% \n  row_spec(1, background = \"#D6AF36\") %>% \n  row_spec(2, background = \"#D7D7D7\") %>%\n  row_spec(3, background = \"#AD8A56\")\n\n\n\nrank\n\n\nn\n\n\nprob\n\n\ncum_prob\n\n\n1\n\n\n9277\n\n\n0.3512286\n\n\n0.3512286\n\n\n2\n\n\n7409\n\n\n0.2805058\n\n\n0.6317344\n\n\n3\n\n\n5257\n\n\n0.1990308\n\n\n0.8307652\n\n\n4\n\n\n3078\n\n\n0.1165335\n\n\n0.9472987\n\n\n5\n\n\n1187\n\n\n0.0449400\n\n\n0.9922387\n\n\n6\n\n\n198\n\n\n0.0074963\n\n\n0.9997350\n\n\n7\n\n\n7\n\n\n0.0002650\n\n\n1.0000000\n\n\n\n\nShow code\n\nwin_any_final %>% \n  ggplot(aes(rank, weight = prob)) +\n  geom_bar(fill = c(\"#D6AF36\", \"#A7A7AD\", \"#A77044\", rep(\"black\", 4))) +\n  geom_vline(xintercept = 3.5) +\n  scale_x_continuous(breaks = 1:7) +\n  labs(x = \"Rank\",\n       y = \"Probability\",\n       title = \"Probability of finishing at every rank given winning any event\")\n\n\n\n\n\n\nShow code\n\nwin_first_final <- final %>% \n  filter(e1 == 1) %>% \n  count(rank) %>% \n  mutate(prob = n / sum(n),\n         cum_prob = cumsum(prob))\n\nwin_first_final %>% \n  kable() %>% \n  row_spec(1, background = \"#D6AF36\") %>% \n  row_spec(2, background = \"#D7D7D7\") %>%\n  row_spec(3, background = \"#AD8A56\")\n\n\n\nrank\n\n\nn\n\n\nprob\n\n\ncum_prob\n\n\n1\n\n\n4295\n\n\n0.4295\n\n\n0.4295\n\n\n2\n\n\n2505\n\n\n0.2505\n\n\n0.6800\n\n\n3\n\n\n1702\n\n\n0.1702\n\n\n0.8502\n\n\n4\n\n\n1020\n\n\n0.1020\n\n\n0.9522\n\n\n5\n\n\n393\n\n\n0.0393\n\n\n0.9915\n\n\n6\n\n\n83\n\n\n0.0083\n\n\n0.9998\n\n\n7\n\n\n2\n\n\n0.0002\n\n\n1.0000\n\n\n\n\nShow code\n\nwin_first_final %>% \n  ggplot(aes(rank, weight = prob)) +\n  geom_bar(fill = c(\"#D6AF36\", \"#A7A7AD\", \"#A77044\", rep(\"black\", 4))) +\n  geom_vline(xintercept = 3.5) +\n  scale_x_continuous(breaks = 1:7) +\n  labs(x = \"Rank\",\n       y = \"Probability\",\n       title = \"Probability of finishing at every rank given winning the first event\")\n\n\n\n\nWhat is the average score of medalists?\n\n\nShow code\n\nfinal %>% \n  group_by(rank) %>% \n  summarize(avg_score = mean(score)) %>% \n  kable() %>% \n  row_spec(1, background = \"#D6AF36\") %>% \n  row_spec(2, background = \"#D7D7D7\") %>%\n  row_spec(3, background = \"#AD8A56\")\n\n\n\nrank\n\n\navg_score\n\n\n1\n\n\n9.6687\n\n\n2\n\n\n20.1844\n\n\n3\n\n\n33.3658\n\n\n4\n\n\n50.5734\n\n\n5\n\n\n75.2499\n\n\n6\n\n\n110.7070\n\n\n7\n\n\n164.8258\n\n\n8\n\n\n265.0198\n\n\nA finalist is very likely to finish in the top 3 and stand in the tri-level podium if they win the first event (83.08% chance) or any event (85.02%). In order to bring home a climbing medal, the average score (rounded down) for getting gold, silver, and bronze are 9, 20, and 33, respectively.\nFuture Work\nThis is the end of my first post of the series on sport climbing. My next post is going to be centered around analyzing climbing data from previous competitions that used the combined rank-product scoring format. If you have any questions, or if you would like me to explore other questions related to the simulation data, please leave a comment.\n\n\n\n",
    "preview": "posts/2021-07-31-climbing-p1-sim/climbing-p1-sim_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-07-05-sports-animations-june-2021/",
    "title": "Sports Animation Gallery - June 2021",
    "description": "Leveling up with {gganimate}.",
    "author": [
      {
        "name": "qntkhvn",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-07-05",
    "categories": [
      "data viz",
      "ggplot2",
      "gganimate",
      "football",
      "euro 2020",
      "tennis"
    ],
    "contents": "\n\nContents\nFootball: EURO 2020\nEngland Performances\nGroup F’s Chaotic Final Day\nDaily Group Tables\n\nTennis: Big Three\nGrand Slam Titles\nGrand Slam Performances\n\n\nOver the past few weeks, I have been playing around with gganimate, a ggplot2 extension for making animated plots in R, and here is a collection of my recent data animations about the world of sports. The full code to each one of the graphs can be found below or on my GitHub. Feel free to suggest a new animation, or give me some feedback on my products. I’d highly appreciate them all.\nFootball: EURO 2020\nThe biggest sporting event in the world this summer prior to the Olympics is no doubt, the UEFA EURO 2020 (or to be more exact… EURO 2020ne). The following graphs contain information on past tournament performances of a storied national squad, and a roller-coaster EURO 2020 group stage.\nEngland Performances\nWill this finally be the year England fans have been waiting for for 55 years? Here is a view of England’s performance at major football tournaments (EURO and World Cup) prior to EURO 2020.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(rvest)\nlibrary(janitor)\ntheme_set(theme_light())\n\n# scrape data from Wikipedia\neng_wiki <- \"https://en.wikipedia.org/wiki/England_national_football_team\"\neng_html <- read_html(eng_wiki)\neng_tables <- html_table(eng_html)\n\nrounds <- c(\"Absent\", \"Group stage\", \"Round of 16\", \"Quarterfinal\", \"Semifinal\", \"Champions\")\nwc_years <- c(\"1930\", \"1934\", \"1938\", seq(1950, 2018, 4))\neuro_years <- as.character(seq(1960, 2016, 4))\nyears <- sort(c(wc_years, euro_years))\n\neng_wc <- eng_tables[[37]] %>% \n  row_to_names(row_number = 1) %>% \n  select(Year, Round) %>% \n  filter(Year %in% wc_years) %>% \n  mutate(Round = if_else(str_detect(Round, \"(?i)not\") == TRUE, \"Absent\", Round),\n         Round = str_remove(Round, \"-\"),\n         Round = str_replace(Round, \"finals\", \"final\"),\n         Round = if_else(Round %in% c(\"Third place\", \"Fourth place\"), \"Semifinal\",\n                         if_else(Round == \"Second group stage\", \"Quarterfinal\", Round)),\n         Round = factor(Round, levels = rounds)) %>% \n  add_count(Year, Round, name = \"Count\") %>% \n  mutate(Year = factor(Year, levels = years))\n\neng_wc <- full_join(eng_wc, expand(eng_wc, Year, Round)) %>%\n  mutate(Count = ifelse(is.na(Count), 0, Count)) %>% \n  arrange(Year, Round) %>% \n  group_by(Round) %>% \n  mutate(Count = cumsum(Count),\n         Tournament = \"World Cup\")\n\neng_euro <- eng_tables[[39]]  %>% \n  row_to_names(row_number = 1) %>% \n  select(Year, Round) %>% \n  filter(Year %in% euro_years) %>% \n  mutate(Round = if_else(str_detect(Round, \"(?i)not\") == TRUE, \"Absent\", Round),\n         Round = str_remove(Round, \"-\"),\n         Round = str_replace(Round, \"finals\", \"final\"),\n         Round = if_else(Round %in% c(\"Third place\", \"Fourth place\"), \"Semifinal\",\n                         if_else(Round == \"Second group stage\", \"Quarterfinal\", Round)),\n         Round = factor(Round, levels = rounds)) %>% \n  add_count(Year, Round, name = \"Count\") %>% \n  mutate(Year = factor(Year, levels = years))\n\neng_euro <- full_join(eng_euro, expand(eng_euro, Year, Round)) %>%\n  mutate(Count = ifelse(is.na(Count), 0, Count)) %>% \n  arrange(Year, Round) %>% \n  group_by(Round) %>% \n  mutate(Count = cumsum(Count),\n         Tournament = \"Euro\")\n\neng_results <- eng_wc %>% \n  bind_rows(eng_euro) %>% \n  arrange(Year) %>% \n  mutate(Year = if_else(Year %in% wc_years,\n                        paste(Year, \"World Cup\"),\n                        paste(Year, \"Euro\")))\n\neng_anim <- eng_results %>% \n  ggplot(aes(x = Count, y = Round, fill = Tournament)) + \n  geom_col(width = 0.5, show.legend = FALSE) +\n  geom_text(aes(label = as.character(Count)), size = 3, hjust = -0.3) + \n  scale_x_continuous(breaks = 0:7) +\n  facet_wrap(~ Tournament) +\n  scale_fill_manual(values = c(\"#00c1d5\", \"gold\")) + \n  theme(strip.background = element_rect(fill = \"#00007e\"),\n        panel.grid.minor.x = element_blank(),\n        plot.caption=element_text(hjust = 0, face = \"italic\")) +\n  transition_states(Year, wrap = FALSE) +\n  labs(caption = \"\\n*Absent: Did not qualify/ Did not enter qualification/ Not a FIFA member at the time\",\n       title = \"England's Performance \\n {closest_state}\")\n\nanimate(eng_anim, nframes = 432, fps = 24, height = 500, width = 700, res = 100, end_pause = 60)\n\n\n\n\nGroup F’s Chaotic Final Day\nOnce again, shoutout to @statsinthewild for the suggestion:\n\n\n@qntkhvn I have a data view idea. X axis is game time and y axis is the ranking of group F teams. Would be cool to see how it changed over the course of the games today.\n\n— Volume Tweeter (@StatsInTheWild) June 23, 2021\n\nAs referred to by many football experts and fans as the “group of death” of this year’s EURO, group F certainly lived up to the expectations. On the final day of the group stage where both group F matches started at the same time (here is the reason), every team was in a position to advance to the knockout stage at some point, and one team was in every position over the course of the matches! How wild!\n\nBAR GRAPH VERSION\n\n\n\nShow code\n\nlibrary(countrycode)\nlibrary(ggflags)\nlibrary(ggdark)\ntheme_set(theme_minimal())\n\nevents <- c(\n  \"POR vs. FRA\\nGER vs. HUN\\n---\\nAfter Matchday 2\\n\",\n  \"POR 0-0 FRA\\nGER 0-0 HUN\\n---\\nKickoff\\n\",\n  \"POR 0-0 FRA\\nGER 0-1 HUN\\n---\\n(HUN) Szalai 11'\\n\",\n  \"POR 1-0 FRA\\nGER 0-1 HUN\\n---\\n(POR) Ronaldo 30' (P)\\n\",\n  \"POR 1-1 FRA\\nGER 0-1 HUN\\n---\\n(FRA) Benzema 45+2' (P)\\n\",\n  \"POR 1-2 FRA\\nGER 0-1 HUN\\n---\\n(FRA) Benzema 47'\\n\",\n  \"POR 2-2 FRA\\nGER 0-1 HUN\\n---\\n(POR) Ronaldo 60' (P)\\n\",\n  \"POR 2-2 FRA\\nGER 1-1 HUN\\n---\\n(GER) Havertz 66'\\n\",\n  \"POR 2-2 FRA\\nGER 1-2 HUN\\n---\\n(HUN) Schafer 68'\\n\",\n  \"POR 2-2 FRA\\nGER 2-2 HUN\\n---\\n(GER) Goretzka 84'\\n\",\n  \"POR 2-2 FRA\\nGER 2-2 HUN\\n---\\nFull-time. End of Group Stage\\n\"\n)\n\nf <- tribble(\n  ~Frame, ~Team, ~Points, ~Rank, ~GD,\n  events[1], \"France\", 4, 1, 1,\n  events[1], \"Germany\", 3, 2, 1,\n  events[1], \"Portugal\", 3, 3, 1,\n  events[1], \"Hungary\", 1, 4, -3,\n  \n  events[2], \"France\", 5, 1, 1,\n  events[2], \"Germany\", 4, 2, 1,\n  events[2], \"Portugal\", 4, 3, 1,\n  events[2], \"Hungary\", 2, 4, -3,\n  \n  events[3], \"France\", 5, 1, 1,\n  events[3], \"Germany\", 3, 4, 0,\n  events[3], \"Portugal\", 4, 2, 1,\n  events[3], \"Hungary\", 4, 3, -2,\n  \n  events[4], \"France\", 4, 2, 0,\n  events[4], \"Germany\", 3, 4, 0,\n  events[4], \"Portugal\", 6, 1, 2,\n  events[4], \"Hungary\", 4, 3, -2,\n  \n  events[5], \"France\", 5, 1, 1,\n  events[5], \"Germany\", 3, 4, 0,\n  events[5], \"Portugal\", 4, 2, 1,\n  events[5], \"Hungary\", 4, 3, -2,\n  \n  events[6], \"France\", 7, 1, 2,\n  events[6], \"Germany\", 3, 3, 0,\n  events[6], \"Portugal\", 3, 4, 0,\n  events[6], \"Hungary\", 4, 2, -2,\n  \n  events[7], \"France\", 5, 1, 1,\n  events[7], \"Germany\", 3, 4, 0,\n  events[7], \"Portugal\", 4, 2, 1,\n  events[7], \"Hungary\", 4, 3, -2,\n  \n  events[8], \"France\", 5, 1, 1,\n  events[8], \"Germany\", 4, 2, 1,\n  events[8], \"Portugal\", 4, 3, 1,\n  events[8], \"Hungary\", 2, 4, -3,\n  \n  events[9], \"France\", 5, 1, 1,\n  events[9], \"Germany\", 3, 4, 0,\n  events[9], \"Portugal\", 4, 2, 1,\n  events[9], \"Hungary\", 4, 3, -2,\n  \n  events[10], \"France\", 5, 1, 1,\n  events[10], \"Germany\", 4, 2, 1,\n  events[10], \"Portugal\", 4, 3, 1,\n  events[10], \"Hungary\", 2, 4, -3,\n  \n  events[11], \"France\", 5, 1, 1,\n  events[11], \"Germany\", 4, 2, 1,\n  events[11], \"Portugal\", 4, 3, 1,\n  events[11], \"Hungary\", 2, 4, -3\n)\n\nanim_bars <- f %>% \n  mutate(Frame = factor(Frame, levels = events),\n         Code = str_to_lower(countrycode(Team, \"country.name\", \"iso2c\"))) %>% \n  ggplot() +\n  geom_col(aes(x = Rank, y = Points, group = Team, fill = Team), \n           show.legend = FALSE, width = 0.5) +\n  geom_text(aes(x = Rank, y = 0, label = paste(Team, \" \", \" \", \" \", \" \", sep = \" \"),\n                group = Team), \n            hjust = 1, size = 4, vjust = 0.35) +\n  geom_text(aes(x = Rank, y = Points, label = as.character(Points)), \n            hjust = -0.3, size = 4) +\n  geom_flag(aes(x = Rank, y = -0.3, country = Code), size = 6) +\n  coord_flip(clip = \"off\") +\n  scale_x_reverse() +\n  scale_y_continuous(breaks = 0:9) + \n  theme(\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 12),\n    axis.ticks = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.margin = margin(0.5, 0.5, 0.5, 2.7, \"cm\"),\n    panel.spacing.x = unit(5.5, \"lines\"),\n    panel.grid.minor = element_blank(),\n    strip.background = element_rect(fill = \"#00c1d5\", color = \"#00c1d5\"),\n    plot.title = element_text(size = 15),\n    plot.subtitle = element_text(size = 12)\n  ) +\n  scale_fill_manual(values = c(\"#052789\", \"#231f20\", \"#0b663a\", \"#e42518\")) +\n  transition_states(Frame, wrap = FALSE) +\n  ease_aes(\"quadratic-in-out\") +\n  labs(\n    title = \"UEFA Euro 2020 Group F Standings - Matchday 3\",\n    subtitle = \"{closest_state}\"\n  )\n\nanimate(anim_bars, nframes = 500, fps = 50, height = 480, width = 600, res = 95, duration = 15, end_pause = 100)\n\n\n\n\n\nLINE GRAPH VERSION\n\n\n\nShow code\n\nanim_lines <- f %>%\n  mutate(\n    Min = case_when(\n      Frame == events[1] ~ \"0'\",\n      Frame == events[2] ~ \"1'\",\n      Frame == events[3] ~ \"11'\",\n      Frame == events[4] ~ \"30'\",\n      Frame == events[5] ~ \"45+2'\",\n      Frame == events[6] ~ \"47'\",\n      Frame == events[7] ~ \"60'\",\n      Frame == events[8] ~ \"66'\",\n      Frame == events[9] ~ \"68'\",\n      Frame == events[10] ~ \"84'\",\n      Frame == events[11] ~ \"90'\",\n      TRUE ~ as.character(Frame)\n    ),\n    Code = str_to_lower(countrycode(Team, \"country.name\", \"iso2c\"))\n  ) %>% \n  ggplot(aes(x = Min, y = Rank, group = Team, color = Team)) +\n  geom_line(size = 1) +\n  geom_point(size = 3.5) +\n  geom_text(aes(x = 12, label = Team), hjust = -0.1, alpha = 0.7, size = 6) +\n  geom_text(aes(x = Min, y = 4.5, label = Min), alpha = 0.5,  col = \"gray\", size = 10) +\n  geom_text(aes(x = 1, y = 0, label = paste0(\"UEFA Euro 2020 Group F Standings - Matchday 3\\n\", Frame)), \n            hjust = 0, col = \"#00c1d5\", size = 5.5) +\n  geom_segment(aes(xend = max(Min), yend = Rank), linetype = 2, size = 0.7) +\n  geom_flag(aes(x = 11.6, y = Rank, country = Code), size = 8) +\n  dark_theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n  ) +\n  scale_y_reverse() +\n  scale_color_manual(values = c(\"#318ce7\", \"white\", \"#CD2A3E\", \"#e42518\")) +\n  expand_limits(x = c(1, 14), y = -0.5) +\n  transition_reveal(as.numeric(as.factor(Min))) +\n  enter_fade() +\n  exit_fade() +\n  ease_aes('cubic-in-out') \n\nanimate(anim_lines, nframes = 500, height = 500, width = 600, fps = 50, end_pause = 100, rewind = FALSE)\n\n\n\n\nDaily Group Tables\nLastly, the animation below shows how the group tables changed throughout the group stage of EURO 2020.\n\n\nShow code\n\neuro_groups <- read_csv(\"https://raw.githubusercontent.com/qntkhvn/funsies/main/animations/euro2020/euro_groups.csv\")\n\ncolors <- c(\"#ED2939\", \"#eb192b\", \"gray22\", \"#ed1b2c\",\n            \"#e32219\",\"#00007e\", \"#002F6C\", \"#052789\",\n            \"#231f20\", \"#0b663a\", \"#0A36AF\", \"#FF4F00\",\n            \"#D20000\", \"#DC143C\", \"#e42518\", \"#e40303\",\n            \"#05005b\", \"#034da3\", \"#880f14\", \"#ffec00\",\n            \"#e4000f\", \"#E30A17\", \"#ffe000\", \"#e11a22\")\n\na <- euro_groups %>% \n  ggplot() +\n  geom_col(aes(x = Rank, y = Points, group = Team, fill = Team), \n           show.legend = FALSE) +\n  geom_text(aes(x = Rank, y = 0, label = paste(Team, \" \", sep = \" \"),\n                group = Team), \n            hjust = 1, size = 3, vjust = 0.35) +\n  geom_text(aes(x = Rank, y = Points, label = as.character(Points)), \n            hjust = -0.3, size = 3) +\n  facet_wrap(~ Group, scales = \"free\", ncol = 2) +\n  coord_flip(clip = \"off\", expand = FALSE) +\n  scale_x_reverse() +\n  ylim(c(0, 9.5)) +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    plot.margin = margin(0.5, 0.5, 0.5, 2.7, \"cm\"),\n    panel.spacing.x = unit(5.5, \"lines\"),\n    panel.grid.minor = element_blank(),\n    strip.background = element_rect(fill = \"#00c1d5\", color = \"#00c1d5\"),\n    plot.title = element_text(size = 10)\n  ) +\n  scale_fill_manual(values = colors) +\n  transition_states(Date, transition_length = 2, state_length = 1, wrap = FALSE) +\n  ggtitle(\"UEFA Euro 2020 Group Standings\\nAs of {closest_state}\")\n\nanimate(a, nframes = 500, fps = 50, height = 480, width = 600, res = 95, end_pause = 200, duration = 12)\n\n\n\n\nTennis: Big Three\nIn addition to football, I also made a couple of tennis animations, both on Grand Slam performances of the famous Big Three - Federer, Nadal, and Djokovic. The two animated charts were made after the conclusion of the 2021 French Open, where Djokovic won his 19th Grand Slam title, and Novak is now only 1 trophy behind Roger and Rafa for the career grand slam winning record in the Open Era. I will be sure to update these plots after every Grand Slam tournament.\nGrand Slam Titles\n\n\nShow code\n\n# for factor reordering\nslams <- c(\n  \"1999 Australian Open\",  \"1999 French Open\",  \"1999 Wimbledon\",  \"1999 US Open\",\n  \"2000 Australian Open\",  \"2000 French Open\",  \"2000 Wimbledon\",  \"2000 US Open\",\n  \"2001 Australian Open\",  \"2001 French Open\",  \"2001 Wimbledon\",  \"2001 US Open\",\n  \"2002 Australian Open\",  \"2002 French Open\",  \"2002 Wimbledon\",  \"2002 US Open\",\n  \"2003 Australian Open\",  \"2003 French Open\",  \"2003 Wimbledon\",  \"2003 US Open\",\n  \"2004 Australian Open\",  \"2004 French Open\",  \"2004 Wimbledon\",  \"2004 US Open\",\n  \"2005 Australian Open\",  \"2005 French Open\",  \"2005 Wimbledon\",  \"2005 US Open\",\n  \"2006 Australian Open\",  \"2006 French Open\",  \"2006 Wimbledon\",  \"2006 US Open\",\n  \"2007 Australian Open\",  \"2007 French Open\",  \"2007 Wimbledon\",  \"2007 US Open\",\n  \"2008 Australian Open\",  \"2008 French Open\",  \"2008 Wimbledon\",  \"2008 US Open\",\n  \"2009 Australian Open\",  \"2009 French Open\",  \"2009 Wimbledon\",  \"2009 US Open\",\n  \"2010 Australian Open\",  \"2010 French Open\",  \"2010 Wimbledon\",  \"2010 US Open\",\n  \"2011 Australian Open\",  \"2011 French Open\",  \"2011 Wimbledon\",  \"2011 US Open\",\n  \"2012 Australian Open\",  \"2012 French Open\",  \"2012 Wimbledon\",  \"2012 US Open\",\n  \"2013 Australian Open\",  \"2013 French Open\",  \"2013 Wimbledon\",  \"2013 US Open\",\n  \"2014 Australian Open\",  \"2014 French Open\",  \"2014 Wimbledon\",  \"2014 US Open\",\n  \"2015 Australian Open\",  \"2015 French Open\",  \"2015 Wimbledon\",  \"2015 US Open\",\n  \"2016 Australian Open\",  \"2016 French Open\",  \"2016 Wimbledon\",  \"2016 US Open\",\n  \"2017 Australian Open\",  \"2017 French Open\",  \"2017 Wimbledon\",  \"2017 US Open\",\n  \"2018 Australian Open\",  \"2018 French Open\",  \"2018 Wimbledon\",  \"2018 US Open\",\n  \"2019 Australian Open\",  \"2019 French Open\",  \"2019 Wimbledon\",  \"2019 US Open\",\n  \"2020 Australian Open\",  \"2020 French Open\",  \"2020 Wimbledon\",  \"2020 US Open\",\n  \"2021 Australian Open\",  \"2021 French Open\")\n\n# scrape data from Wikipedia\nplayer <- function(name) {\n  wiki <- paste(\"https://en.wikipedia.org/wiki/\", name, sep = \"\")\n  html <- read_html(wiki)\n  tables <- html_table(html)\n  \n  results <- tables[[4]] %>% \n    filter(Tournament != \"Win–Loss\") %>% \n    select(-SR, -contains(\"W\")) %>% \n    pivot_longer(!Tournament, names_to = \"Year\", values_to = \"Result\") %>% \n    mutate(Result = ifelse(str_detect(Result, \"\\\\[\") == TRUE,\n                           str_sub(Result, 1, nchar(Result) - 3), Result)) %>% \n    filter(!(Result %in% c(\"\", \"NH\", \"Q1\", \"Q2\", \"A\"))) %>% \n    mutate(Result = factor(Result, levels = c(\"1R\", \"2R\", \"3R\", \"4R\", \"QF\", \"SF\", \"F\", \"W\"))) %>% \n    unite(Slam, c(Year, Tournament), sep = \" \") %>% \n    add_count(Slam, Result, name = \"Count\") %>% \n    mutate(Slam = factor(Slam, levels = slams))\n  \n  results <- full_join(results, expand(results, Slam, Result)) %>%\n    mutate(Count = ifelse(is.na(Count), 0, Count)) %>% \n    arrange(Slam, Result) %>% \n    group_by(Result) %>% \n    mutate(Count = cumsum(Count),\n           Player = name)\n}\n\nslam <- player(\"Roger_Federer\") %>% \n  full_join(player(\"Rafael_Nadal\")) %>% \n  full_join(player(\"Novak_Djokovic\")) %>% \n  mutate(Player = str_replace(Player, \"_\", \" \"),\n         Player = factor(Player, \n                         levels = c(\"Roger Federer\", \"Rafael Nadal\", \"Novak Djokovic\")))\n\nslam_anim <- slam %>% \n  filter(Result == \"W\") %>% \n  mutate(Player = fct_rev(Player)) %>% \n  ggplot(aes(x = Count, y = Player, fill = Player)) + \n  geom_col(width = 0.5, show.legend = FALSE) +\n  scale_fill_manual(values = c(\"#08457e\", \"#aa151b\", \"red\")) + \n  geom_text(aes(label = as.character(Count)), hjust = -0.3) + \n  ggtitle(\"Grand Slam Titles\\n{closest_state}\") +\n  transition_states(Slam) +\n  ease_aes(\"quadratic-in-out\")\n\nanimate(slam_anim, nframes = 2160, fps = 50, height = 480, width = 600, res = 90, duration = 12)\n\n\n\n\nGrand Slam Performances\n\n\nShow code\n\nslam_perf_anim <- slam %>% \n  ggplot(aes(x = Count, y = Result, fill = Player)) + \n  geom_col(width = 0.5, show.legend = FALSE) +\n  geom_text(aes(label = as.character(Count)), size = 3, hjust = -0.3) + \n  facet_wrap(~ Player) +\n  xlim(c(0, 23)) +\n  scale_fill_manual(values = c(\"red\", \"#aa151b\", \"#08457e\")) + \n  theme_light() +\n  theme(strip.background = element_rect(fill = \"darkkhaki\")) +\n  transition_states(Slam) +\n  ggtitle(\"Grand Slam Main Draw Performance \\n {closest_state}\")\n\nanimate(slam_perf_anim, nframes = 2160, fps = 90, height = 500, width = 720, res = 100)\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-07-05-sports-animations-june-2021/euro_group_stage.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 1072,
    "preview_height": 858
  },
  {
    "path": "posts/2021-07-03-euro-groups/",
    "title": "EURO Group Tables and Knockout Performances",
    "description": "Everybody loves cinderella stories and fairy-tale runs.",
    "author": [
      {
        "name": "qntkhvn",
        "url": "https://github.com/qntkhvn"
      }
    ],
    "date": "2021-07-03",
    "categories": [
      "data viz",
      "ggplot2",
      "football",
      "euro 2020"
    ],
    "contents": "\n\nContents\nMotivation\nHeatmap\nThoughts\nWhat’s Next?\n\nMotivation\nIt all began with a suggestion from my professor, @statsinthewild:\n\n\n@qntkhvn I think something like this would be cool. And you could go back to past Euros to see what this would look like.It's possible that THREE teams who finished third in their group will be in the final 8! And no one from group F advanced to final 8! pic.twitter.com/T9fUeXuoOs\n\n— Volume Tweeter (@StatsInTheWild) June 29, 2021\n\nSo I went back and looked at the group positions and knockout outcomes for the national teams that competed in the 6 most recent UEFA EURO tournaments - 1996, 2000, 2004, 2008, 2012, and 2016. These are competitions with 16 (1996-2012) or 24 (2016) teams, as prior to ’96, the EURO was either an 8- or 4-team tournament. I visited the Wikipedia page of each one those EUROs and quickly collected the desired data. After that, I utilized R packages ggplot2 and plotly to make a simple heatmap of how the national teams performed in past European championships.\nHeatmap\nAs you can see, each observation in the heatmap below is represented by their group name (y-axis), group position (x-axis), tournament result (coded by different color values), and tournament year. The plot is also interactive, so you can actually reveal more information about the teams and their performances by simply moving your cursor inside the plot area. As always, you can find my code below. For this blog post, I’m not going to go over the details of the plotting process, rather I’m going to save it for a future tutorial blog post.\n\n\nShow code\n\nlibrary(tidyverse)\nlibrary(plotly)\n\nTeam <- c(\n  \"England\", \"Netherlands\", \"Scotland\", \"Switzerland\",\n  \"France\", \"Spain\", \"Bulgaria\", \"Romania\",\n  \"Germany\", \"Czech Republic\", \"Italy\", \"Russia\",\n  \"Portugal\", \"Croatia\", \"Denmark\", \"Turkey\",\n  \n  \"Portugal\", \"Romania\", \"England\", \"Germany\",\n  \"Italy\", \"Turkey\", \"Belgium\", \"Sweden\",\n  \"Spain\", \"Yugoslavia\", \"Norway\", \"Slovenia\",\n  \"Netherlands\", \"France\", \"Czech Republic\", \"Denmark\",\n  \n  \"Portugal\", \"Greece\", \"Spain\", \"Russia\",\n  \"France\", \"England\", \"Croatia\", \"Switzerland\",\n  \"Sweden\", \"Denmark\", \"Italy\", \"Bulgaria\",\n  \"Czech Republic\", \"Netherlands\", \"Germany\", \"Latvia\",\n  \n  \"Portugal\", \"Turkey\", \"Czech Republic\", \"Switzerland\",\n  \"Croatia\", \"Germany\", \"Austria\", \"Poland\",\n  \"Netherlands\", \"Italy\", \"Romania\", \"France\",\n  \"Spain\", \"Russia\", \"Sweden\", \"Greece\",\n  \n  \"Czech Republic\", \"Greece\", \"Russia\", \"Poland\",\n  \"Germany\", \"Portugal\", \"Denmark\", \"Netherlands\",\n  \"Spain\", \"Italy\", \"Croatia\", \"Ireland\",\n  \"England\", \"France\", \"Ukraine\", \"Sweden\",\n  \n  \"France\", \"Switzerland\", \"Albania\", \"Romania\",\n  \"Wales\", \"England\", \"Slovakia\", \"Russia\",\n  \"Germany\", \"Poland\", \"Northern Ireland\", \"Ukraine\",\n  \"Croatia\", \"Spain\", \"Turkey\", \"Czech Republic\",\n  \"Italy\", \"Belgium\", \"Ireland\", \"Sweden\",\n  \"Hungary\", \"Iceland\", \"Portugal\", \"Austria\"\n)\n\nOutcome <- c(\n  \"SF\", \"QF\", \"G\", \"G\", \"SF\", \"QF\", \"G\", \"G\", \"W\", \"F\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", # 96 \n  \"SF\", \"QF\", \"G\", \"G\", \"F\", \"QF\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", \"SF\", \"W\", \"G\", \"G\", # 00\n  \"F\", \"W\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", \"SF\", \"SF\", \"G\", \"G\", # 04\n  \"QF\", \"SF\", \"G\", \"G\", \"QF\", \"F\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", \"W\", \"SF\", \"G\", \"G\", # 08\n  \"QF\", \"QF\", \"G\", \"G\", \"SF\", \"SF\", \"G\", \"G\", \"W\", \"F\", \"G\", \"G\", \"QF\", \"QF\", \"G\", \"G\", # 12\n  \"F\", \"R16\", \"G\", \"G\", \"SF\", \"R16\", \"R16\", \"G\", \"SF\", \"QF\", \"R16\", \"G\", # 16 \n  \"R16\", \"R16\", \"G\", \"G\", \"QF\", \"QF\", \"R16\", \"G\", \"R16\", \"QF\", \"W\", \"G\"\n)\n\neuro <- tibble(\n  Year = c(rep(seq(1996, 2012, 4), each = 16), rep(2016, 24)),\n  Team,\n  Group = c(rep(rep(c(\"A\", \"B\", \"C\", \"D\"), each = 4), 6), \n            rep(c(\"E\", \"F\"), each = 4)),\n  Place = rep(1:4, 26),\n  Outcome\n) %>% \n  mutate(Outcome = factor(Outcome, levels = c(\"G\", \"R16\", \"QF\", \"SF\", \"F\", \"W\")))\n\np <- euro %>% \n  mutate(Group = fct_rev(Group)) %>% \n  ggplot(aes(x = Place, y = Group, fill = Outcome, group = Team)) +\n  geom_tile(color = \"white\") +\n  facet_wrap(~ Year, scales = \"free_y\") +\n  ggtitle(\"EURO Performances and Group Positions\") +\n  scale_fill_brewer(palette = \"PRGn\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.title = element_blank(),\n    axis.title = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank()\n  )\n\np %>%\n  ggplotly() %>%\n  layout(legend = list(\n    x = 0.25,\n    y = -0.1,\n    orientation = \"h\"\n  ))\n\n\n\n\nThoughts\nThere are a couple of things I wanted to highlight here:\nIn ’96, ’04 and ’12, teams that were in the same group met again in the final!\nGermany and Czech Republic in ’96. I was -3 back then.\nGreece and Portugal in ’04. Portugal was the host that year, and played Greece on the opening and final days of EURO 2004. Greece won in both occasions. (Czech Republic were the best team that year - I’m sure most people agreed with 4-year-old Quang then.) GREECE!\nSpain and Italy in ’12. Italy defeated a very strong German squad in the SF. Super Mario! Many people, including my 12-year-old self, believed they would end Spain’s dynasty, who were the defending EURO champs and also the reigning World Cup champs coming into the tournament. Nope, Spain won 4-0 (and Fernando Torres, who was a shell of himself at that point, and despite starting 0 knockout matches, won the Golden Boot). The dynasty eventually fell apart at the 2014 World Cup…\n\nPortugal, despite finishing third in their group in 2016, went on to become the champions. They barely made it through the group stage. 3 draws… and down 1-3 to Hungary in the second half of their final group stage match…\nWhat’s Next?\nThere are many other situations where we could apply this type of plot to. In regard to sports, heatmap is a great visual tool when we have data on rankings, or seedings; for example, grand slam tennis, NCAA March Madness, or even weekly tables for football leagues. I will eventually write up a blog post on how to make heatmaps with ggplot2. Stay tuned!\n\n\n\n",
    "preview": "posts/2021-07-03-euro-groups/euro_group.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 704,
    "preview_height": 576
  },
  {
    "path": "posts/2021-07-02-rules/",
    "title": "Rules",
    "description": "Just a few simple rules on this blog.",
    "author": [
      {
        "name": "qntkhvn",
        "url": {}
      }
    ],
    "date": "2021-07-02",
    "categories": [
      "rules"
    ],
    "contents": "\nWelcome to my new blog, The Q! This post is nothing more than a “Hello, World!” message for the blog.\n\nRULES\n\nFootball means the real football here, not the American one.\nMatch, not game.\nDraw, not tie.\nPitch, not field.\nTable, not standings.\nNil, not zero/zip/nothing/whatever.\nBoots, not cleats.\nKit, not uniform.\nWhat else?\n\nCereals, pancakes, and waffles are desserts.\n\n\n\n",
    "preview": "posts/2021-07-02-rules/rules.png",
    "last_modified": "2022-07-21T11:11:12-04:00",
    "input_file": {},
    "preview_width": 820,
    "preview_height": 436
  }
]
